// +build !ignore_autogenerated

/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package openapi

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/ibm/cloud-operators/pkg/types/apis/keyvalue/v1.KeyValue":               schema_types_apis_keyvalue_v1_KeyValue(ref),
		"github.com/ibm/cloud-operators/pkg/types/apis/keyvalue/v1.KeyValueSource":         schema_types_apis_keyvalue_v1_KeyValueSource(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.Composition":         schema_pkg_apis_openwhisk_v1beta1_Composition(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.CompositionList":     schema_pkg_apis_openwhisk_v1beta1_CompositionList(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.CompositionSpec":     schema_pkg_apis_openwhisk_v1beta1_CompositionSpec(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.CompositionStatus":   schema_pkg_apis_openwhisk_v1beta1_CompositionStatus(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.Function":            schema_pkg_apis_openwhisk_v1beta1_Function(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.FunctionList":        schema_pkg_apis_openwhisk_v1beta1_FunctionList(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.FunctionSpec":        schema_pkg_apis_openwhisk_v1beta1_FunctionSpec(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.FunctionStatus":      schema_pkg_apis_openwhisk_v1beta1_FunctionStatus(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.Invocation":          schema_pkg_apis_openwhisk_v1beta1_Invocation(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.InvocationFinalizer": schema_pkg_apis_openwhisk_v1beta1_InvocationFinalizer(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.InvocationList":      schema_pkg_apis_openwhisk_v1beta1_InvocationList(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.InvocationSpec":      schema_pkg_apis_openwhisk_v1beta1_InvocationSpec(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.InvocationStatus":    schema_pkg_apis_openwhisk_v1beta1_InvocationStatus(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.InvocationTarget":    schema_pkg_apis_openwhisk_v1beta1_InvocationTarget(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.Limits":              schema_pkg_apis_openwhisk_v1beta1_Limits(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.Package":             schema_pkg_apis_openwhisk_v1beta1_Package(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.PackageList":         schema_pkg_apis_openwhisk_v1beta1_PackageList(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.PackageSpec":         schema_pkg_apis_openwhisk_v1beta1_PackageSpec(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.PackageStatus":       schema_pkg_apis_openwhisk_v1beta1_PackageStatus(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.Rule":                schema_pkg_apis_openwhisk_v1beta1_Rule(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.RuleList":            schema_pkg_apis_openwhisk_v1beta1_RuleList(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.RuleSpec":            schema_pkg_apis_openwhisk_v1beta1_RuleSpec(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.RuleStatus":          schema_pkg_apis_openwhisk_v1beta1_RuleStatus(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.Trigger":             schema_pkg_apis_openwhisk_v1beta1_Trigger(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.TriggerList":         schema_pkg_apis_openwhisk_v1beta1_TriggerList(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.TriggerSpec":         schema_pkg_apis_openwhisk_v1beta1_TriggerSpec(ref),
		"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.TriggerStatus":       schema_pkg_apis_openwhisk_v1beta1_TriggerStatus(ref),
	}
}

func schema_types_apis_keyvalue_v1_KeyValue(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KeyValue represents a key-value pair",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name representing the key.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"attributes": {
						SchemaProps: spec.SchemaProps{
							Description: "A parameter may have attributes (e.g. message hub topic might have partitions)",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
									},
								},
							},
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Description: "Defaults to null.",
							Ref:         ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
						},
					},
					"valueFrom": {
						SchemaProps: spec.SchemaProps{
							Description: "Source for the value. Cannot be used if value is not empty.",
							Ref:         ref("github.com/ibm/cloud-operators/pkg/types/apis/keyvalue/v1.KeyValueSource"),
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"github.com/ibm/cloud-operators/pkg/types/apis/keyvalue/v1.KeyValueSource", "k8s.io/apimachinery/pkg/runtime.RawExtension"},
	}
}

func schema_types_apis_keyvalue_v1_KeyValueSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KeyValueSource represents a source for the value of a KeyValue.",
				Properties: map[string]spec.Schema{
					"configMapKeyRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Selects a key of a ConfigMap.",
							Ref:         ref("k8s.io/api/core/v1.ConfigMapKeySelector"),
						},
					},
					"secretKeyRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Selects a key of a secret in the resource namespace",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ConfigMapKeySelector", "k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_Composition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Composition is the Schema for the compositions API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.CompositionSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.CompositionStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.CompositionSpec", "github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.CompositionStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_CompositionList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CompositionList contains a list of Composition",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.Composition"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.Composition", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_CompositionSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CompositionSpec defines the desired state of Composition",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Composition name. Override metadata.name. Does not include the package name (see below)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"package": {
						SchemaProps: spec.SchemaProps{
							Description: "Composition package name. Add it to the default package when not specified",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"compositionURI": {
						SchemaProps: spec.SchemaProps{
							Description: "The location of the composition to deploy. Support `http(s)` and `file` protocols.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"composition": {
						SchemaProps: spec.SchemaProps{
							Description: "The inline composition to deploy.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"contextFrom": {
						SchemaProps: spec.SchemaProps{
							Description: "Reference to a secret representing where to deploy this entity Default is `seed-default-owprops` The secret must defines these fields: apihost (string) : The OpenWhisk host auth (string): the authorization key cert (string):  the client certificate (optional) insecure (bool):  Whether or not to bypass certificate checking (optional, default is false)",
							Ref:         ref("k8s.io/api/core/v1.SecretEnvSource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SecretEnvSource"},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_CompositionStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CompositionStatus defines the observed state of Composition",
				Properties: map[string]spec.Schema{
					"state": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"generation": {
						SchemaProps: spec.SchemaProps{
							Description: "Last synced generation. Set by the system",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_Function(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Function is the Schema for the functions API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.FunctionSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.FunctionStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.FunctionSpec", "github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.FunctionStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_FunctionList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FunctionList contains a list of Function",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.Function"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.Function", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_FunctionSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FunctionSpec represents the specification for Function resources",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Action name. Override metadata.name. Does not include the package name (see below)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"package": {
						SchemaProps: spec.SchemaProps{
							Description: "Action package name. Add it to the default package when not specified",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"codeURI": {
						SchemaProps: spec.SchemaProps{
							Description: "The location of the code to deploy. Support `http(s)` and `file` protocols.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"code": {
						SchemaProps: spec.SchemaProps{
							Description: "The inline code to deploy.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"runtime": {
						SchemaProps: spec.SchemaProps{
							Description: "Runtime name and optional version. More info: https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#languages-and-runtimes\n\nSupport these runtimes (not an exhaustive live):\n\nRuntime\t| image name\t| Description\n -------- | --------- | ----------\n app | N/A | runs a function composition\n sequence | N/A | runs a function sequence\n nodejs | nodejsaction:latest | Latest NodeJS runtime\n nodejs:6\t| nodejs6action:latest | Latest NodeJS 6 runtime\n java\t| java8action:latest | Latest Java language runtime\n python:2\t| python2action:latest | Latest Python 2 language runtime\n python:3\t| python3action:latest | Latest Python 3 language runtime\n swift | swiftaction:latest | Latest Swift 2 language runtime\n swift:3\t| swift3action:latest | Latest Swift 3 language runtime\n swift:3.1.1 | action-swift-v3.1.1:latest | Latest Swift 3.1.1 language runtime\n php:7.1 | action-php-v7.1:latest\t| Latest PHP language runtime\n",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"docker": {
						SchemaProps: spec.SchemaProps{
							Description: "Docker image identifier (in dockerhub). More info: https://github.com/apache/incubator-openwhisk/blob/master/docs/actions-docker.md",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"native": {
						SchemaProps: spec.SchemaProps{
							Description: "Run the action as native. More info: https://github.com/apache/incubator-openwhisk/blob/master/docs/actions-docker.md#creating-native-actions",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Description: "List of key/value input parameters",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ibm/cloud-operators/pkg/types/apis/keyvalue/v1.KeyValue"),
									},
								},
							},
						},
					},
					"limits": {
						SchemaProps: spec.SchemaProps{
							Description: "Sets the action limits. More info: https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#system-limits",
							Ref:         ref("github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.Limits"),
						},
					},
					"main": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the action entry point (function or fully-qualified method name when applicable)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"functions": {
						SchemaProps: spec.SchemaProps{
							Description: "Comma separated sequence of actions. Only valid when `runtime` is `sequence`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"webExport": {
						SchemaProps: spec.SchemaProps{
							Description: "Turns the function into a \"web action\" causing it to return HTTP content without use of an API Gateway. More info: https://github.com/apache/incubator-openwhisk/blob/master/docs/webactions.md",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"rawHTTP": {
						SchemaProps: spec.SchemaProps{
							Description: "Indicates if the function is able to consume the raw contents within the body of an HTTP request. Only valid when `webExport` is `true`. More info: https://github.com/apache/incubator-openwhisk/blob/master/docs/webactions.md#raw-http-handling",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "List of key/value annotations",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ibm/cloud-operators/pkg/types/apis/keyvalue/v1.KeyValue"),
									},
								},
							},
						},
					},
					"contextFrom": {
						SchemaProps: spec.SchemaProps{
							Description: "Reference to a secret representing where to deploy this entity Default is `seed-default-owprops` The secret must defines these fields: apihost (string) : The OpenWhisk host auth (string): the authorization key cert (string):  the client certificate (optional) insecure (bool):  Whether or not to bypass certificate checking (optional, default is false)",
							Ref:         ref("k8s.io/api/core/v1.SecretEnvSource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/ibm/cloud-operators/pkg/types/apis/keyvalue/v1.KeyValue", "github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.Limits", "k8s.io/api/core/v1.SecretEnvSource"},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_FunctionStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FunctionStatus defines the observed state of Function",
				Properties: map[string]spec.Schema{
					"state": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"generation": {
						SchemaProps: spec.SchemaProps{
							Description: "Last synced generation. Set by the system",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"generation"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_Invocation(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Invocation is the Schema for the invocations API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.InvocationSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.InvocationStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.InvocationSpec", "github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.InvocationStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_InvocationFinalizer(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InvocationFinalizer defines the function to invoke when deleting the function invocation",
				Properties: map[string]spec.Schema{
					"function": {
						SchemaProps: spec.SchemaProps{
							Description: "Function defines the name of the function to invoke (eg. `/whisk.system/utils/echo` or `myfunction`) Invokes the function in the invocation context when the name is not fully qualified",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Description: "Parameters defines the list of parameters to use for the invocation",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ibm/cloud-operators/pkg/types/apis/keyvalue/v1.KeyValue"),
									},
								},
							},
						},
					},
				},
				Required: []string{"function"},
			},
		},
		Dependencies: []string{
			"github.com/ibm/cloud-operators/pkg/types/apis/keyvalue/v1.KeyValue"},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_InvocationList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InvocationList contains a list of Invocation",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.Invocation"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.Invocation", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_InvocationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InvocationSpec defines the desired state of Invocation",
				Properties: map[string]spec.Schema{
					"function": {
						SchemaProps: spec.SchemaProps{
							Description: "defines the name of function to invoke (eg. `/whisk.system/utils/echo` or `myfunction`) Invokes the function in the invocation context when the name is not fully qualified",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the list of parameters to use for the invocation",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ibm/cloud-operators/pkg/types/apis/keyvalue/v1.KeyValue"),
									},
								},
							},
						},
					},
					"to": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines where to store the invocation result. Discard the result when not specified.",
							Ref:         ref("github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.InvocationTarget"),
						},
					},
					"finalizer": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the function to invoke when this resource is deleted.",
							Ref:         ref("github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.InvocationFinalizer"),
						},
					},
					"contextFrom": {
						SchemaProps: spec.SchemaProps{
							Description: "Reference to a secret representing where to deploy this entity Default is `seed-default-owprops` The secret must defines these fields: apihost (string) : The OpenWhisk host auth (string): the authorization key cert (string):  the client certificate (optional) insecure (bool):  Whether or not to bypass certificate checking (optional, default is false)",
							Ref:         ref("k8s.io/api/core/v1.SecretEnvSource"),
						},
					},
				},
				Required: []string{"function"},
			},
		},
		Dependencies: []string{
			"github.com/ibm/cloud-operators/pkg/types/apis/keyvalue/v1.KeyValue", "github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.InvocationFinalizer", "github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.InvocationTarget", "k8s.io/api/core/v1.SecretEnvSource"},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_InvocationStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InvocationStatus defines the observed state of Invocation",
				Properties: map[string]spec.Schema{
					"state": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"generation": {
						SchemaProps: spec.SchemaProps{
							Description: "Last synced generation. Set by the system",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"generation"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_InvocationTarget(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InvocationTarget represents where to store the invocation result",
				Properties: map[string]spec.Schema{
					"configMapKeyRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Selects a key of a ConfigMap.",
							Ref:         ref("k8s.io/api/core/v1.ConfigMapKeySelector"),
						},
					},
					"secretKeyRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Selects a key of a secret in the invocation namespace",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"projection": {
						SchemaProps: spec.SchemaProps{
							Description: "JSONPath template selecting parts of the invocation result to store. Default is \"{@.response.result}\" More info: https://kubernetes.io/docs/reference/kubectl/jsonpath/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ConfigMapKeySelector", "k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_Limits(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Limits is used to express function resources constraints such as memory limits or timeout",
				Properties: map[string]spec.Schema{
					"timeout": {
						SchemaProps: spec.SchemaProps{
							Description: "The per-invocation Action timeout. Default unit is assumed to be milliseconds (ms).",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"memory": {
						SchemaProps: spec.SchemaProps{
							Description: "The per-Action memory. Default unit is assumed to be in megabytes (MB).",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"logSize": {
						SchemaProps: spec.SchemaProps{
							Description: "The action log size. Default unit is assumed to be in megabytes (MB).",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_Package(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Package is the Schema for the packages API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.PackageSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.PackageStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.PackageSpec", "github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.PackageStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_PackageList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PackageList contains a list of Package",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.Package"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.Package", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_PackageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PackageSpec defines the desired state of Package",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Package name. Override metadata.name. `default` is reserved.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"publish": {
						SchemaProps: spec.SchemaProps{
							Description: "Package visibility; `true` for `shared`, `false` for `private`",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"bind": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the package for which a binding should be created",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"service": {
						SchemaProps: spec.SchemaProps{
							Description: "indicates a cloud service resource which you want to bind to. This feature provides automatic injection of service keys into the binding parameters (for example user, password, urls)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "List of key/value annotations",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ibm/cloud-operators/pkg/types/apis/keyvalue/v1.KeyValue"),
									},
								},
							},
						},
					},
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Description: "List of key/value input parameters",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ibm/cloud-operators/pkg/types/apis/keyvalue/v1.KeyValue"),
									},
								},
							},
						},
					},
					"contextFrom": {
						SchemaProps: spec.SchemaProps{
							Description: "Reference to a secret representing where to deploy this entity Default is `seed-default-owprops` The secret must defines these fields: apihost (string) : The OpenWhisk host auth (string): the authorization key cert (string):  the client certificate (optional) insecure (bool):  Whether or not to bypass certificate checking (optional, default is false)",
							Ref:         ref("k8s.io/api/core/v1.SecretEnvSource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/ibm/cloud-operators/pkg/types/apis/keyvalue/v1.KeyValue", "k8s.io/api/core/v1.SecretEnvSource"},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_PackageStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PackageStatus defines the observed state of Package",
				Properties: map[string]spec.Schema{
					"state": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"generation": {
						SchemaProps: spec.SchemaProps{
							Description: "Last synced generation. Set by the system",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"generation"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_Rule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Rule is the Schema for the rules API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.RuleSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.RuleStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.RuleSpec", "github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.RuleStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_RuleList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RuleList contains a list of Rule",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.Rule"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.Rule", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_RuleSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RuleSpec defines the desired state of Rule",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Rule name. Override metadata.name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"trigger": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the trigger the Rule applies to",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"function": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the action the rule applies to",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"contextFrom": {
						SchemaProps: spec.SchemaProps{
							Description: "Reference to a secret representing where to deploy this entity Default is `seed-default-owprops` The secret must defines these fields: apihost (string) : The OpenWhisk host auth (string): the authorization key cert (string):  the client certificate (optional) insecure (bool):  Whether or not to bypass certificate checking (optional, default is false)",
							Ref:         ref("k8s.io/api/core/v1.SecretEnvSource"),
						},
					},
				},
				Required: []string{"trigger", "function"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SecretEnvSource"},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_RuleStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RuleStatus defines the observed state of Rule",
				Properties: map[string]spec.Schema{
					"state": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"generation": {
						SchemaProps: spec.SchemaProps{
							Description: "Last synced generation. Set by the system",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"generation"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_Trigger(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Trigger is the Schema for the triggers API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.TriggerSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.TriggerStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.TriggerSpec", "github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.TriggerStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_TriggerList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TriggerList contains a list of Trigger",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.Trigger"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/ibm/openwhisk-operator/pkg/apis/openwhisk/v1beta1.Trigger", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_TriggerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TriggerSpec defines the desired state of Trigger",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Trigger name. Override metadata.name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"feed": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the feed associated with the trigger",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "List of key/value annotations",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ibm/cloud-operators/pkg/types/apis/keyvalue/v1.KeyValue"),
									},
								},
							},
						},
					},
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Description: "List of key/value input parameters",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ibm/cloud-operators/pkg/types/apis/keyvalue/v1.KeyValue"),
									},
								},
							},
						},
					},
					"contextFrom": {
						SchemaProps: spec.SchemaProps{
							Description: "Reference to a secret representing where to deploy this entity Default is `seed-default-owprops` The secret must defines these fields: apihost (string) : The OpenWhisk host auth (string): the authorization key cert (string):  the client certificate (optional) insecure (bool):  Whether or not to bypass certificate checking (optional, default is false)",
							Ref:         ref("k8s.io/api/core/v1.SecretEnvSource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/ibm/cloud-operators/pkg/types/apis/keyvalue/v1.KeyValue", "k8s.io/api/core/v1.SecretEnvSource"},
	}
}

func schema_pkg_apis_openwhisk_v1beta1_TriggerStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TriggerStatus defines the observed state of Trigger",
				Properties: map[string]spec.Schema{
					"state": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"generation": {
						SchemaProps: spec.SchemaProps{
							Description: "Last synced generation. Set by the system",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"generation"},
			},
		},
		Dependencies: []string{},
	}
}
